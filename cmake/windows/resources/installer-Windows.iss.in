; IMPORTANT : This file is ONLY used when building with Inno Setup

#define MyProjectName "@CMAKE_PROJECT_NAME@"
#define MyAppName "@PLUGIN_DISPLAY_NAME@"
#define MyAppVersion "@CMAKE_PROJECT_VERSION@"
#define MyAppPublisher "@PLUGIN_AUTHOR@"
#define MyAppURL "@PLUGIN_WEBSITE@"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{@UUID_APP@}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}/help
AppUpdatesURL={#MyAppURL}/download
DefaultDirName={commonappdata}\obs-studio\plugins\{#MyProjectName}
DefaultGroupName={#MyAppName}
OutputBaseFilename={#MyAppName}-{#MyAppVersion}-Windows-Installer
Compression=lzma
SolidCompression=yes
DirExistsWarning=no
RestartIfNeededByRun=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\release\Package\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Do not use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"

[InstallDelete]
; Remove previous obs-ndi plugin files (the hard-way)
; This process is execuste BEFORE the installation starts
; Type: filesandordirs; Name: "{app}\data\obs-plugins\obs-ndi\"
; Type: files; Name: "{app}\obs-plugins\64bit\obs-ndi.dll"
; Type: files; Name: "{app}\obs-plugins\64bit\obs-ndi.pdb"

[Run]
; Uninstall OBS-NDI (former plugin name)
; This trigger the uninstall process of the old obs-ndi after installation of DistroAV but before the final dialog
Filename: "{code:GetOldAppUninstallerPath}"; Parameters: "/VERYSILENT /NORESTART /SUPPRESSMSGBOXES"; Check: UninstallOldAppAvailable ;  Description: "Silently Uninstall OBS-NDI"
; Dev-note: Cannot use : Flags: skipifdoesntexist >> it only takes absolute filename.

[Code]
// Post-Install actions
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    // Remove old OBS-NDI
    // Remove previous obs-ndi plugin folers & files (the hard-way)
    if ( DelTree(ExpandConstant('{code:GetOBSDirName}\data\obs-plugins\obs-ndi'), True, True, True) ) then
      Log('Removed old obs-ndi plugin folder: ' + ExpandConstant('{code:GetOBSDirName}\data\obs-plugins\obs-ndi'));
    if ( DelTree(ExpandConstant('{code:GetOBSDirName}\data\obs-plugins\obs-ndi*'), False, True, True) ) then
      Log('Removed old obs-ndi plugin files: ' + ExpandConstant('{code:GetOBSDirName}\data\obs-plugins\obs-ndi*'));

    // Allow DistroAV & OBS in windows firewall
    SetFirewallRules('out');
    SetFirewallRules('in');
  end;
end;


// Remove old OBS-NDI conflicting plugin - by Trouffman for DistroAV https://github.com/DistroAV/DistroAV/ & https://github.com/DistroAV/DistroAV/wiki/OBS%E2%80%90NDI-Is-Now-DistroAV
// CAREFUL : this target the old AppID.
const UninstallRegisteryKey411up = 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{A9039243-4FE7-45E7-8B11-7DC1ACB67B9D}_is1';
const UninstallRegisteryKey410 = 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{CD703FE5-1F2C-4837-BD3D-DD840D83C3E3}_is1';

function GetOldAppUninstallerPath(Param: String): String;
var
  UninstallerPathRegistry: String;
// At least one Param string is required to use this function with {code:}, can be empty.
begin
  Result := '';
// Check primary registry location version 4.11+
  if ( RegQueryStringValue(HKLM, UninstallRegisteryKey411up, 'UninstallString', UninstallerPathRegistry) ) then
      Result := RemoveQuotes(UninstallerPathRegistry)
// Check alternative Registry location
  else if ( RegQueryStringValue(HKCU, UninstallRegisteryKey411up, 'UninstallString', UninstallerPathRegistry) ) then
      Result := RemoveQuotes(UninstallerPathRegistry)

// Check primary registry location version 4.10
  else if ( RegQueryStringValue(HKLM, UninstallRegisteryKey410, 'UninstallString', UninstallerPathRegistry) ) then
      Result := RemoveQuotes(UninstallerPathRegistry)
// Check alternative Registry location
  else if ( RegQueryStringValue(HKCU, UninstallRegisteryKey410, 'UninstallString', UninstallerPathRegistry) ) then
      Result := RemoveQuotes(UninstallerPathRegistry);
end;

function UninstallOldAppAvailable(): Boolean;
begin
  if (GetOldAppUninstallerPath('') <> '') then Result := True else Result := False;
end;


// Firewall Rules
// Add or Update the firewall rules to allow DistroAV & OBS
// Log entries are visible only when using /LOG
const FirewallRuleName = 'OBS - DistroAV';
const FirewallRuleGroup = 'Audio-Video Tools';
const FirewallRulesDescription = 'Rules added by DistroAV installer for ease of use.';

function SetFirewallRules(Direction: String): Boolean;
var
  ResultCode: Integer;
begin
  ResultCode := 0;
  // Update firewall rule if exist
  if Exec('netsh', 'advfirewall firewall set rule name="' + FirewallRuleName + '" new group="' + FirewallRuleGroup + '" dir=' + Direction + ' action=allow program="' + ExpandConstant('{code:GetOBSDirName}\bin\64bit\obs64.exe') + '" description="' + FirewallRulesDescription + '" enable=yes', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then 
    begin
      Log('Update Firewall ' + Direction + ' Rule ' + FirewallRuleName + ': Successful.');
      Result := True;
    end;
  // Add rule if missing
  else if Exec('netsh', 'advfirewall firewall add rule name="' + FirewallRuleName + '" group="' + FirewallRuleGroup + '" dir=' + Direction + ' action=allow program="' + ExpandConstant('{code:GetOBSDirName}\bin\64bit\obs64.exe') + '" description="' + FirewallRulesDescription + '" enable=yes', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then 
      begin
        Log('Add Firewall ' + Direction + ' Rule ' + FirewallRuleName + ': Successful.');
        Result := True;
      end;
    else
      begin
        Log('Add Firewall ' + Direction + ' Rule ' + FirewallRuleName + ': Failed.');
        Result := False;
      end;
end;

// Helper script to find the OBS installation path
// credit where it's due :
// following function come from https://github.com/Xaymar/obs-studio_amf-encoder-plugin/blob/master/%23Resources/Installer.in.iss#L45
// This is deprecated as it is not super reliable if portable install are used. Replace with a more reliable method in the future.
function GetOBSDirName(Value: string): string;
var
  InstallPath: String;
begin
  // initialize default path, which will be returned when the following registry
  // key queries fail due to missing keys or for some different reason
  Result := '{autopf}\obs-studio';
  // query the first registry value; if this succeeds, return the obtained value
  if RegQueryStringValue(HKLM32, 'SOFTWARE\OBS Studio', '', InstallPath) then
    Result := InstallPath;
end;
